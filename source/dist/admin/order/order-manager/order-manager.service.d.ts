import { OrderDetailRepository } from "../../../repository/order/OrderDetail.repository";
import { ResOrderItemDTO } from "../order-list/DTO/ResOrderItemDTO";
import { ReqUserUpdateDTO } from "./DTO/ReqUserUpdateDTO";
import { OrderMainRepository } from "../../../repository/order/OrderMain.repository";
import { ReqOrderSeparationDTO } from "./DTO/ReqOrderSeparationDTO";
import { ReqOrderStatusChangeDTO } from "./DTO/ReqOrderStatusChangeDTO";
import { OrderPaymentRepository } from "../../../repository/order/OrderPayment.repository";
import { ResPaymentDTO } from "../order-list/DTO/ResPaymentDTO";
import { ReqOrderStatusChangePageDTO } from "./DTO/ReqOrderStatusChangePageDTO";
import { MemberRepository } from "../../../repository/member/Member.repository";
import { ReqOrderChangeFuncDTO } from "./DTO/ReqOrderChangeFuncDTO";
import { OrderRefundRepository } from "../../../repository/order/OrderRefund.repository";
import { MemberAddressRepository } from "../../../repository/member/MemberAddress.repository";
import { ProductOptionRepository } from "../../../repository/product/ProductOption.repository";
import { ProductOptionDetailRepository } from "../../../repository/product/ProductOptionDetail.repository";
import { ProductBrandRepository } from "../../../repository/product/ProductBrand.repository";
import { DeliveryCompanyRepository } from "../../../repository/delivery/DeliveryCompany.repository";
import { ReqOrderStatusChangeDepositDTO } from "./DTO/ReqOrderStatusChangeDepositDTO";
import { OrderHistoryRepository } from "../../../repository/order/OrderHistory.repository";
export declare class OrderManagerService {
    private orderDetailRepository;
    private orderMainRepository;
    private orderPaymentRepository;
    private memberRepository;
    private orderRefundRepository;
    private memberAddressRepository;
    private productOptionRepository;
    private productOptionDetailRepository;
    private productBrandRepository;
    private deliveryCompanyRepository;
    private orderHistoryRepository;
    constructor(orderDetailRepository: OrderDetailRepository, orderMainRepository: OrderMainRepository, orderPaymentRepository: OrderPaymentRepository, memberRepository: MemberRepository, orderRefundRepository: OrderRefundRepository, memberAddressRepository: MemberAddressRepository, productOptionRepository: ProductOptionRepository, productOptionDetailRepository: ProductOptionDetailRepository, productBrandRepository: ProductBrandRepository, deliveryCompanyRepository: DeliveryCompanyRepository, orderHistoryRepository: OrderHistoryRepository);
    getSelectOrder(order_code: String): Promise<{
        order_info: any;
        item_info: ResOrderItemDTO[];
        claim_info: ResOrderItemDTO[];
        payment_info: any;
        payment_list_info: ResPaymentDTO[];
        exchange_info: ResOrderItemDTO[];
    }>;
    putOrderUserData(order_code: string, data: ReqUserUpdateDTO): Promise<string>;
    putStateChange(reqOrderStatusChangeDTO: ReqOrderStatusChangeDTO): Promise<string>;
    putStateChangeDeposit(req: ReqOrderStatusChangeDepositDTO): Promise<string>;
    postSeperateOrders(reqOrderSeparationDTO: Array<ReqOrderSeparationDTO>): Promise<string>;
    findChangeRecord(orderId: String): Promise<any>;
    findChangeRecordByOrder(orderId: string, orderDetailId: string): Promise<any>;
    postChangePageOn(reqOrderStatusChangePageDTO: ReqOrderStatusChangePageDTO): Promise<{
        claim_infos: ResOrderItemDTO[];
        refund_price: any;
        return_delivery_info: any;
        re_delivery_info: any;
    }>;
    postChangePageRun(reqOrderChangeFuncDTO: ReqOrderChangeFuncDTO): Promise<"취소에 성공했습니다." | "반품에 성공했습니다." | "교환에 성공했습니다.">;
}
