var Db = require('../index');
var should = require('chai').should();
var fs = require('fs');
var mocha = require('mocha');

function deleteFileSync(path) {
  if (fs.existsSync(path)) {
    fs.unlinkSync(path);
  }
}

function resolve(filename) {
  return require('path').resolve(__dirname, filename);
}

describe("database", function () {

  var path = resolve('test.db');

  beforeEach(function () {
    deleteFileSync(path);
  });

  describe("#set", function () {
    it("saves values", function (done) {
      var db = new Db(path);
      var id = db.set({ name:"example" }, writeCompleted);

      function writeCompleted(err, saved) {
        var data = fs.readFileSync(path, "utf8");
        var obj = JSON.parse(data);
        obj.should.deep.equal(saved);
        saved._id.should.equal(id);
        done(err);
      }
    });
  });


  describe("#get", function () {
    it("retrieves saved values", function (done) {
      var db = new Db(path);
      var setCount = 2;
      var getCount = 2;
      var id1 = null;
      var id2 = null;
      var resultSet1 = {};
      var resultSet2 = {};

      doSet();

      function doSet() {
        id1 = db.set({ name:"example 1" }, setCompleted);
        id2 = db.set({ name:"example 2" }, setCompleted);
      }

      function setCompleted(err, saved) {
        setCount -= 1;
        resultSet1[saved._id] = saved;
        if (!setCount) doGet();
      }

      function doGet() {
        db.get(id1, getCompleted);
        db.get(id2, getCompleted);
      }

      function getCompleted(err, result) {
        getCount -= 1;
        resultSet2[result._id] = result;
        if (!getCount) verifyGetResults();
      }

      function verifyGetResults() {
        resultSet1.should.deep.equal(resultSet2);
        done();
      }
    });
  });


  describe("persistence", function () {
    it("can read back a data file", function (done) {
      var db = new Db(path);
      var id1 = db.set({ name:"example 1" }, writeCompleted);

      function writeCompleted(err, saved) {
        var db2 = new Db(path);
        db2.get(id1, function (err, result) {
          result.should.deep.equal(saved);
          done();
        });
      }
    });
  });


  describe("#remove", function () {
    it("removes a value from the database", function (done) {
      var db = new Db(path);
      var id1 = db.set({ name:"to be removed" });
      db.remove(id1);
      db.get(id1, function (err, result) {
        should.not.exist(result);
        done();
      });
    });
  });


  describe("#find", function () {
    it("returns a filtered result list based on the filter function", function (done) {
      var db = new Db(path);
      var obj1 = { name:"Alex" };
      var obj2 = { name:"John" };
      var obj3 = { name:"Mack" };
      var obj4 = { name:"Steve" };
      var id1 = db.set(obj1);
      var id2 = db.set(obj2);
      var id3 = db.set(obj3);
      var id4 = db.set(obj4);
      obj1._id = id1;
      obj2._id = id2;
      obj3._id = id3;
      obj4._id = id4;

      noFilterCheck();

      function noFilter() { return true; }
      function hasLetterA(obj) { return obj.name.toLowerCase().indexOf("a") > -1; }

      function noFilterCheck() {
        db.find(noFilter, function (err, results) {
          listToMap(results).should.deep.equal(listToMap([obj1, obj2, obj3, obj4]));
          filterCheck();
        });
      }

      function filterCheck() {
        db.find(hasLetterA, function (err, results) {
          listToMap(results).should.deep.equal(listToMap([obj1, obj3]));
          done();
        });
      }

      function listToMap(list) {
        var map = {};
        for (var i = 0; i < list.length; i++) {
          map[list[i]._id] = list[i];
        }
        return map;
      }
    });
  });


  describe("in-memory option", function () {
    it("can run in memory", function () {
      var db = new Db(path, { memory:true });
      var id1 = db.set({ name:"Zen" });
      var result = null;
      db.get(id1, function (err, data) {
        result = data;
      });
      should.exist(result);
    });
  });
});
